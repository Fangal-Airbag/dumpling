#include <stdint.h>
#include <stdbool.h>

uint8_t repairData_setFaultBehavior[] = {
	0xE1,0x2F,0xFF,0x1E,0xE9,0x2D,0x40,0x30,0xE5,0x93,0x20,0x00,0xE1,0xA0,0x40,0x00,
	0xE5,0x92,0x30,0x54,0xE1,0xA0,0x50,0x01,0xE3,0x53,0x00,0x01,0x0A,0x00,0x00,0x02,
	0xE1,0x53,0x00,0x00,0xE3,0xE0,0x00,0x00,0x18,0xBD,0x80,0x30,0xE3,0x54,0x00,0x0D,
};
uint8_t repairData_setPanicBehavior[] = {
	0x08,0x16,0x6C,0x00,0x00,0x00,0x18,0x0C,0x08,0x14,0x40,0x00,0x00,0x00,0x9D,0x70,
	0x08,0x16,0x84,0x0C,0x00,0x00,0xB4,0x0C,0x00,0x00,0x01,0x01,0x08,0x14,0x40,0x00,
	0x08,0x15,0x00,0x00,0x08,0x17,0x21,0x80,0x08,0x17,0x38,0x00,0x08,0x14,0x30,0xD4,
	0x08,0x14,0x12,0x50,0x08,0x14,0x12,0x94,0xE3,0xA0,0x35,0x36,0xE5,0x93,0x21,0x94,
	0xE3,0xC2,0x2E,0x21,0xE5,0x83,0x21,0x94,0xE5,0x93,0x11,0x94,0xE1,0x2F,0xFF,0x1E,
	0xE5,0x9F,0x30,0x1C,0xE5,0x9F,0xC0,0x1C,0xE5,0x93,0x20,0x00,0xE1,0xA0,0x10,0x00,
	0xE5,0x92,0x30,0x54,0xE5,0x9C,0x00,0x00,
};
static uint8_t repairData_USBRootThread[] = {
	0xE5,0x8D,0xE0,0x04,0xE5,0x8D,0xC0,0x08,0xE5,0x8D,0x40,0x0C,0xE5,0x8D,0x60,0x10,
	0xEB,0x00,0xB2,0xFD,0xEA,0xFF,0xFF,0xC9,0x10,0x14,0x03,0xF8,0x10,0x62,0x4D,0xD3,
	0x10,0x14,0x50,0x00,0x10,0x14,0x50,0x20,0x10,0x14,0x00,0x00,0x10,0x14,0x00,0x90,
	0x10,0x14,0x00,0x70,0x10,0x14,0x00,0x98,0x10,0x14,0x00,0x84,0x10,0x14,0x03,0xE8,
	0x10,0x14,0x00,0x3C,0x00,0x00,0x01,0x73,0x00,0x00,0x01,0x76,0xE9,0x2D,0x4F,0xF0,
	0xE2,0x4D,0xDE,0x17,0xEB,0x00,0xB9,0x92,0xE3,0xA0,0x10,0x00,0xE3,0xA0,0x20,0x03,
	0xE5,0x9F,0x0E,0x68,0xEB,0x00,0xB3,0x20,
};

int(*disableInterrupts)() = (int(*)())0x0812E778;
int(*enableInterrupts)(int) = (int(*)(int))0x0812E78C;
void(*invalidateICache)() = (void(*)())0x0812DCF0;
void(*invalidateDCache)(unsigned int, unsigned int) = (void(*)())0x08120164;
void(*flushDCache)(unsigned int, unsigned int) = (void(*)())0x08120160;
char* (*kernelMemcpy)(void*, void*, int) = (char*(*)(void*, void*, int))0x08131D04;
int (*readOTP)(int index, void* out_buf, uint32_t size) = (int (*)(int, void*, uint32_t))0x08120248;

static inline uint32_t disableMMU() {
	uint32_t controlRegister = 0;
	asm volatile("MRC p15, 0, %0, c1, c0, 0" : "=r" (controlRegister));
	asm volatile("MCR p15, 0, %0, c1, c0, 0" : : "r" (controlRegister & 0xFFFFEFFA));
	return controlRegister;
}

static inline void restoreMMU(uint32_t controlRegister) {
	asm volatile("MCR p15, 0, %0, c1, c0, 0" : : "r" (controlRegister));
}

#define ARM_B(addr, func)   (0xEA000000 | ((((uint32_t)(func) - (uint32_t)(addr) - 8) >> 2) & 0x00FFFFFF))
#define ARM_BL(addr, func)  (0xEB000000 | ((((uint32_t)(func) - (uint32_t)(addr) - 8) >> 2) & 0x00FFFFFF))
#define THUMB_B(addr, func)     ((0xE000 | ((((uint32_t)(func) - (uint32_t)(addr) - 4) >> 1) & 0x7FF)))
#define THUMB_BL(addr, func)    ((0xF000F800 | ((((uint32_t)(func) - (uint32_t)(addr) - 4) >> 1) & 0x0FFF)) | ((((uint32_t)(func) - (uint32_t)(addr) - 4) << 4) & 0x7FFF000))


#define KERNEL_RUN_ADDR(addr) (void*)(addr - 0x05100000 + 0x13D80000)
#define KERNEL_SRC_ADDR(addr) (void*)(addr - 0x05000000 + 0x081C0000)

int32_t mainKernel();